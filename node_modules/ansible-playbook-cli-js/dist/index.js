"use strict";
var _ = require('lodash');
var nodeify_ts_1 = require('nodeify-ts');
var child_process = require('child_process');
var os = require('os');
var exec = child_process.exec;
var extractResult = function (result) {
    var i, line, recap_line;
    try {
        result.lines = result.raw.split(os.EOL);
        for (i = 0; i < result.lines.length; i++) {
            line = String(result.lines[i]);
            if (line && _.startsWith(line, 'PLAY RECAP *') && i + 1 < result.lines.length) {
                recap_line = result.lines[i + 1];
                break;
            }
        }
        if (recap_line) {
            var extractValue = function (strp, re) {
                var m;
                if ((m = re.exec(strp)) !== null) {
                    if (m.index === re.lastIndex) {
                        re.lastIndex++;
                    }
                }
                return (m && m[1]) ? parseInt(m[1], 10) : null;
            };
            result.object = {
                changed: extractValue(recap_line, /\s*changed=(\d*)/g),
                failed: extractValue(recap_line, /\s*failed=(\d*)/g),
                host: function (strp) {
                    var re = /^(.*)\s*:/g;
                    var m;
                    if ((m = re.exec(strp)) !== null) {
                        if (m.index === re.lastIndex) {
                            re.lastIndex++;
                        }
                    }
                    if (m && m[1]) {
                        return m[1].trim();
                    }
                    return null;
                }(recap_line),
                ok: extractValue(recap_line, /:\s*ok=(\d*)/g),
                unreachable: extractValue(recap_line, /\s*unreachable=(\d*)/g),
            };
        }
    }
    catch (e) {
        result.object = e;
    }
    return result;
};
var AnsiblePlaybook = (function () {
    function AnsiblePlaybook(options) {
        if (options === void 0) { options = {
            currentWorkingDirectory: null,
        }; }
        this.options = options;
    }
    AnsiblePlaybook.prototype.command = function (command, callback) {
        var ansiblePlaybook = this;
        var execCommand = 'ansible-playbook ' + command;
        var promise = Promise.resolve().then(function () {
            var execOptions = {
                cwd: ansiblePlaybook.options.currentWorkingDirectory,
                env: {
                    DEBUG: '',
                    HOME: process.env.HOME,
                    PATH: process.env.PATH,
                },
                maxBuffer: 200 * 1024 * 1024,
            };
            return new Promise(function (resolve, reject) {
                exec(execCommand, execOptions, function (error, stdout, stderr) {
                    if (error) {
                        var message = "error: '" + error + "' stdout = '" + stdout + "' stderr = '" + stderr + "'";
                        console.error(message);
                        reject(message);
                    }
                    resolve({ stderr: stderr, stdout: stdout });
                });
            });
        }).then(function (data) {
            var result = {
                command: execCommand,
                error: data.stderr,
                raw: data.stdout,
            };
            return extractResult(result);
        });
        return nodeify_ts_1.default(promise, callback);
    };
    return AnsiblePlaybook;
}());
exports.AnsiblePlaybook = AnsiblePlaybook;
var Options = (function () {
    function Options(currentWorkingDirectory) {
        this.currentWorkingDirectory = currentWorkingDirectory;
    }
    return Options;
}());
exports.Options = Options;
//# sourceMappingURL=index.js.map